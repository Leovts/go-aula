// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entitie "microservice/domain/entitie"

	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TagRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, cursor, num
func (_m *TagRepository) Fetch(ctx context.Context, cursor string, num int64) ([]entitie.Tag, string, error) {
	ret := _m.Called(ctx, cursor, num)

	var r0 []entitie.Tag
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) ([]entitie.Tag, string, error)); ok {
		return rf(ctx, cursor, num)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []entitie.Tag); ok {
		r0 = rf(ctx, cursor, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entitie.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) string); ok {
		r1 = rf(ctx, cursor, num)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int64) error); ok {
		r2 = rf(ctx, cursor, num)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TagRepository) GetByID(ctx context.Context, id int64) (entitie.Tag, error) {
	ret := _m.Called(ctx, id)

	var r0 entitie.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entitie.Tag, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entitie.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entitie.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, title
func (_m *TagRepository) GetByName(ctx context.Context, title string) (entitie.Tag, error) {
	ret := _m.Called(ctx, title)

	var r0 entitie.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entitie.Tag, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entitie.Tag); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(entitie.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, a
func (_m *TagRepository) Store(ctx context.Context, a *entitie.Tag) error {
	ret := _m.Called(ctx, a)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entitie.Tag) error); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, ar
func (_m *TagRepository) Update(ctx context.Context, ar *entitie.Tag) error {
	ret := _m.Called(ctx, ar)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entitie.Tag) error); ok {
		r0 = rf(ctx, ar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTagRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTagRepository creates a new instance of TagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTagRepository(t mockConstructorTestingTNewTagRepository) *TagRepository {
	mock := &TagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
